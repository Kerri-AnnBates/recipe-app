{"ast":null,"code":"import axios from 'axios';\nimport { axiosWithAuth } from '../protected/axiosWithAuth';\nexport const FETCH_DATA_START = 'FETCH_DATA_START';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const FETCH_DATA_FAIL = 'FETCH_DATA_FAIL';\nexport const FETCH_PROFILE_START = 'FETCH_PROFILE_START';\nexport const FETCH_PROFILE_SUCCESS = 'FETCH_PROFILE_SUCCESS';\nexport const FETCH_PROFILE_FAIL = 'FETCH_PROFILE_FAIL';\nexport const POST_DATA_START = 'POST_DATA_START';\nexport const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\nexport const POST_DATA_FAIL = 'POST_DATA_FAIL';\nexport const REGISTER_USER_START = 'REGISTER_USER_START';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_FAIL = 'REGISTER_USER_FAIL';\nexport const LOGIN_USER_START = 'LOGIN_USER_START';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAIL = 'LOGIN_USER_FAIL'; // Register user\n\nexport const registerUser = userData => dispatch => {\n  dispatch({\n    type: REGISTER_USER_START\n  });\n  axios.post('http://localhost:5000/api/auth/register', userData).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(error => {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error\n    });\n  });\n}; // Log in user\n\nexport const loginUser = creds => dispatch => {\n  dispatch({\n    type: LOGIN_USER_START\n  });\n  axios.post('http://localhost:5000/api/auth/login', creds).then(res => {\n    console.log(res.data); // save token\n\n    localStorage.setItem('token', res.data.token);\n    dispatch({\n      type: LOGIN_USER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(error => {\n    dispatch({\n      type: LOGIN_USER_FAIL,\n      payload: error\n    });\n  });\n}; // get user's profile\n\nexport const fetchUserProfile = () => dispatch => {\n  dispatch({\n    type: FETCH_PROFILE_START\n  });\n  const token = localStorage.getItem('token'); // console.log('token from action:', token)\n\n  if (token) {\n    axiosWithAuth().get('http://localhost:5000/api/users/profile').then(res => {\n      // console.log('From actions: ',res.data);\n      const user = {\n        username: res.data.username,\n        password: res.data.password\n      };\n      const userInfo = {\n        id: res.data.id,\n        username: res.data.username\n      }; // loginUser(user);\n\n      dispatch({\n        type: FETCH_PROFILE_SUCCESS,\n        payload: userInfo\n      });\n    }).catch(error => {\n      dispatch({\n        type: FETCH_PROFILE_FAIL,\n        payload: error\n      });\n    });\n  } else {\n    console.log('no token provided');\n  }\n}; // Fetch all recipes\n\nexport const fetchRecipes = () => dispatch => {\n  dispatch({\n    type: FETCH_DATA_START\n  });\n  axios.get('http://localhost:5000/api/recipes').then(res => {\n    console.log(res.data);\n    dispatch({\n      type: FETCH_DATA_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: FETCH_DATA_FAIL,\n      payload: err\n    });\n  });\n}; // fetch recipes by user id\n\nexport const fetchUserRecipes = id => dispatch => {\n  dispatch({\n    type: FETCH_DATA_START\n  });\n  axiosWithAuth().get(`http://localhost:5000/api/users/${id}/recipes`).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: FETCH_DATA_SUCCESS,\n      payload: res.data\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch({\n      type: FETCH_DATA_FAIL,\n      payload: error\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kerri-annbates/Documents/projects/recipe-app/client/src/actions/index.js"],"names":["axios","axiosWithAuth","FETCH_DATA_START","FETCH_DATA_SUCCESS","FETCH_DATA_FAIL","FETCH_PROFILE_START","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_FAIL","POST_DATA_START","POST_DATA_SUCCESS","POST_DATA_FAIL","REGISTER_USER_START","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOGIN_USER_START","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL","registerUser","userData","dispatch","type","post","then","res","console","log","data","payload","catch","error","loginUser","creds","localStorage","setItem","token","fetchUserProfile","getItem","get","user","username","password","userInfo","id","fetchRecipes","err","fetchUserRecipes"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { axiosWithAuth } from '../protected/axiosWithAuth';\n\nexport const FETCH_DATA_START = 'FETCH_DATA_START';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const FETCH_DATA_FAIL = 'FETCH_DATA_FAIL';\n\nexport const FETCH_PROFILE_START = 'FETCH_PROFILE_START';\nexport const FETCH_PROFILE_SUCCESS = 'FETCH_PROFILE_SUCCESS';\nexport const FETCH_PROFILE_FAIL = 'FETCH_PROFILE_FAIL';\n\nexport const POST_DATA_START = 'POST_DATA_START';\nexport const POST_DATA_SUCCESS = 'POST_DATA_SUCCESS';\nexport const POST_DATA_FAIL = 'POST_DATA_FAIL';\n\nexport const REGISTER_USER_START = 'REGISTER_USER_START';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_FAIL = 'REGISTER_USER_FAIL';\n\nexport const LOGIN_USER_START = 'LOGIN_USER_START';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAIL = 'LOGIN_USER_FAIL';\n\n// Register user\nexport const registerUser = (userData) => dispatch => {\n   dispatch({ type: REGISTER_USER_START });\n\n   axios.post('http://localhost:5000/api/auth/register', userData)\n      .then(res => {\n         console.log(res.data);\n         dispatch({\n            type: REGISTER_USER_SUCCESS,\n            payload: res.data\n         });\n      })\n      .catch(error => {\n         dispatch({\n            type: REGISTER_USER_FAIL,\n            payload: error\n         });\n      })\n}\n\n// Log in user\nexport const loginUser = (creds) => (dispatch) => {\n   dispatch({ type: LOGIN_USER_START });\n   \n   axios.post('http://localhost:5000/api/auth/login', creds)\n      .then(res => {\n         console.log(res.data);\n         \n         // save token\n         localStorage.setItem('token', res.data.token);\n\n         dispatch({\n            type: LOGIN_USER_SUCCESS,\n            payload: res.data\n         });\n      })\n      .catch(error => {\n         dispatch({\n            type: LOGIN_USER_FAIL,\n            payload: error\n         });\n      });\n}\n\n// get user's profile\nexport const fetchUserProfile = () => dispatch => {\n   dispatch({ type: FETCH_PROFILE_START});\n   const token = localStorage.getItem('token');\n   // console.log('token from action:', token)\n   if(token) {\n      axiosWithAuth().get('http://localhost:5000/api/users/profile')\n         .then(res => {\n            // console.log('From actions: ',res.data);\n            const user = {\n               username: res.data.username,\n               password: res.data.password\n            }\n            const userInfo = {\n               id: res.data.id,\n               username: res.data.username\n            }\n\n            // loginUser(user);\n            dispatch({ \n               type: FETCH_PROFILE_SUCCESS,\n               payload: userInfo\n            });\n         })\n         .catch(error => {\n            dispatch({\n               type: FETCH_PROFILE_FAIL,\n               payload: error\n            });\n         })\n   } else {\n      console.log('no token provided');\n   }\n}\n\n// Fetch all recipes\nexport const fetchRecipes = () => dispatch => {\n   dispatch({ type: FETCH_DATA_START });\n\n   axios.get('http://localhost:5000/api/recipes')\n      .then(res => {\n         console.log(res.data);\n         dispatch({\n            type: FETCH_DATA_SUCCESS,\n            payload: res.data\n         });\n      })\n      .catch(err => {\n         console.log(err);\n         dispatch({\n            type: FETCH_DATA_FAIL,\n            payload: err\n         });\n      });\n}\n\n// fetch recipes by user id\nexport const fetchUserRecipes = (id) => dispatch => {\n   dispatch({ type: FETCH_DATA_START });\n\n   axiosWithAuth().get(`http://localhost:5000/api/users/${id}/recipes`)\n      .then(res => {\n         console.log(res.data);\n\n         dispatch({\n            type: FETCH_DATA_SUCCESS,\n            payload: res.data\n         });\n\n      })\n      .catch(error => {\n         console.log(error);\n\n         dispatch({\n            type: FETCH_DATA_FAIL,\n            payload: error\n         });\n      })\n}"]},"metadata":{},"sourceType":"module"}